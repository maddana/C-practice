Array Implementation: Push and Pop

  #include<stdio.h>
#include<stdlib.h>
struct stack {
	int * a;
	int top;
	int maxSize;
};
void initstack(struct stack * p, int maxSize);
void push(struct stack * p, int item);
void display(struct stack p);
int pop(struct stack * p);
void printMenu();

int main()  {
	struct stack p;
	int data,ch, data1, m;
	printf("Enter the maximum size of the stack\n");
	scanf("%d",&m);
	initstack(&p,m);
	do {
	printMenu();	
	printf("Enter your choice\n");
	scanf("%d",&ch);
	switch(ch) {
	  case 1:
		printf("Enter the element to be pushed\n");
		scanf("%d",&data);
		push(&p, data);
		break;
	  case 2:
		data1 = pop(&p);
		if(data1 != -1000)
		printf("The popped element is %d\n",data1);
		break;
	  case 3:
		printf("The contents of the stack are");
		display(p);
		printf("\n");
		break;
	  default:
		return 0;
	}
	} while(1);
	return 0;
}

void printMenu()
{
	printf("Choice 1 : Push\n");
	printf("Choice 2 : Pop\n");
	printf("Choice 3 : Display\n");
	printf("Any other choice : Exit\n");
}

void initstack(struct stack * p, int maxSize) {
  p->a=malloc(maxSize*sizeof(int));
  //p->top=(int)malloc(sizeof(int));
  //p->maxSize=(int)malloc(sizeof(int));
  p->top=-1;
  p->maxSize=maxSize;
}

void push(struct stack * p, int item) {
  if(p->top==(p->maxSize)-1)
    printf("Stack is full\n");
  else 
  {
    p->top++;
	p->a[p->top]=item;
  }
}

void display(struct stack p) {
  int i;
  if(p.top==-1)
    printf(" {}");
  else
    for(i=0;i<=p.top;i++)
      printf(" %d",p.a[i]);
}

int pop(struct stack * p) {
	if(p->top==-1)
    {
      printf("Stack is empty\n");
      return -1000;
    }
  else
    return p->a[p->top--];      
}

--------------------------------------------------

Array Implementation

#include<stdio.h>
#include<string.h>
struct queue {
  int contents[5];
  int front;
  int count;
} ;
 
void initQueue(struct queue * q);
void enQueue(struct queue * q, int element);
int deQueue(struct queue * q);
void display( struct queue q);
void printMenu();

int main()
{
    struct queue p;
    int data,ch, data1;
    initQueue(&p);
    do {
    printMenu();   
    printf("Enter your choice\n");
    scanf("%d",&ch);
    switch(ch) {
      case 1:
        printf("Enter the element to be inserted/entered\n");
        scanf("%d",&data);
        enQueue(&p, data);
        break;
      case 2:
        data1 = deQueue(&p);
        if(data1 != -1000)
        printf("The deleted element is %d\n",data1);
        break;
      case 3:
        printf("The contents of the queue are");
        display(p);
        printf("\n");
        break;
      default:
        return 0;
    }
    } while(1);
    return 0;
}

void printMenu()
{
    printf("Choice 1 : Enter element into Queue\n");
    printf("Choice 2 : Delete element from Queue\n");
    printf("Choice 3 : Display\n");
    printf("Any other choice : Exit\n");
}

void initQueue(struct queue * q)
{
  q->front=0;
  q->count=0;
}

void enQueue(struct queue * q, int element)
{
  int index;
  index=(q->count + q->front)%5;
    if(index == q->front && q->count !=0)
  printf("Queue is full\n");
 else {
  q->count++;
  q->contents[index] = element;
}
}

int deQueue(struct queue * q)
{
        int elem;
  if(q->count==0){
  printf("Queue is empty\n");
  return (-1000);
 }
  elem = q->contents[q->front];
   q->count--;
   q->front = (q->front + 1) % 5;
  return (elem);
}

void display( struct queue q)
{
  int i,index;
 if (q.count==0)
   printf(" {}");
  else {
  for (index = q.front,i=1; i<= q.count; i++,index++)
   printf(" %d", q.contents[index%5]);
 }
}
